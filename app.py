from flask import Flask, render_template, request, send_file
import openai
import os
from dotenv import load_dotenv
import json
import csv
import datetime
from weasyprint import HTML
import tempfile

# Load environment variables
load_dotenv()

# Initialize OpenAI client
client = openai.OpenAI(
    api_key=os.getenv("OPENAI_API_KEY")
)

# Load prompts from JSON
with open("prompts.json", "r", encoding="utf-8") as f:
    prompt_data = json.load(f)
    prompts_list = prompt_data["prompts"]

app = Flask(__name__)

def word_count(text):
    return len(text.strip().split())

def get_gpt_feedback(prompt_text, user_writing, task_number, task_type):
    system_prompt = f"""
You are an experienced IELTS Writing Examiner. Evaluate the following Task {task_number} ({task_type}) response using official IELTS scoring criteria:
- Task Response / Achievement
- Coherence and Cohesion
- Lexical Resource
- Grammatical Range and Accuracy

Provide a realistic Band Score from 4.0 to 8.5 (do NOT limit yourself to 6.0‚Äì7.5)

Also give:
- Strengths (what was done well)
- Weaknesses (where improvements are needed)
- Improvement Tips (specific suggestions)
- A full model answer that reflects high-scoring writing style and length

User Prompt: {prompt_text}
User Writing: {user_writing}

Return your response in exactly this format:

Band Score: [score]
Strengths:
- [point 1]
- [point 2]
Weaknesses:
- [point 1]
- [point 2]
Improvement Tips:
- [tip 1]
- [tip 2]
Model Answer:
[full model answer here]

üìö Useful Resources:
üìò [British Council Writing Tips](https://learnenglish.britishcouncil.org/skills/writing)   
üìù [IDP IELTS Writing Guide](https://www.ieltsidpindia.com/information/prepare-for-ielts/ielts-writing)   
üéØ [IELTS Liz - Task 2 Practice](https://ieltsliz.com/ielts-writing-task-2/)   
üß† [IELTS Mastery Hub](https://www.sparkskytech.com/shop/learning-education/ielts-mastery-hub)   
üì∫ [YouTube Playlist](https://www.youtube.com/playlist?list=PLaSmN7qMfXNQH1rV-Ksj7xEnKTOgxTRfo)
"""

    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_writing}
            ],
            max_tokens=1000,
            temperature=0.7
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"‚ö†Ô∏è Error getting feedback: {str(e)}"

@app.route("/", methods=["GET", "POST"])
def index():
    result = None
    writing = ""
    task_type = "Academic"
    task_number = "1"
    prompt_text = ""

    if request.method == "POST":
        writing = request.form.get("writing", "")
        task_type = request.form.get("task_type", "Academic")
        task_number = request.form.get("task_number", "1")
        prompt_select = request.form.get("prompt_select", "")
        prompt_text = prompt_select or request.form.get("prompt_text", "")

        min_words = 250 if task_number == "2" else 150
        if word_count(writing) < min_words:
            result = f"‚ö†Ô∏è Please write at least {min_words} words for Task {task_number}."
        else:
            result = get_gpt_feedback(prompt_text, writing, task_number, task_type)

            # Save submission to CSV 
            timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            with open("submissions.csv", "a", newline="", encoding="utf-8") as f:
                writer = csv.writer(f)
                writer.writerow([timestamp, task_type, task_number, prompt_text[:100], writing[:100]])

    return render_template(
        "index.html",
        writing=writing,
        task_type=task_type,
        task_number=task_number,
        prompt_text=prompt_text,
        result=result,
        prompts=prompts_list
    )

@app.route("/download", methods=["POST"])
def download():
    result = request.form.get("result", "")
    prompt_text = request.form.get("prompt_text", "")
    writing = request.form.get("writing", "")

    html_content = f"""
    <h1>IELTS Writing Feedback Report</h1>
    <h2>Prompt:</h2><p>{prompt_text}</p>
    <h2>Your Writing:</h2><p>{writing}</p>
    <h2>Feedback:</h2><pre>{result}</pre>
    <p><small>Generated by SparkSkyTech IELTS Writing App</small></p>
    """

    temp_dir = tempfile.gettempdir()
    pdf_path = os.path.join(temp_dir, "ielts_feedback.pdf")

    HTML(string=html_content).write_pdf(pdf_path)

    return send_file(pdf_path, as_attachment=True, download_name="ielts_writing_feedback.pdf")

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 5000)))